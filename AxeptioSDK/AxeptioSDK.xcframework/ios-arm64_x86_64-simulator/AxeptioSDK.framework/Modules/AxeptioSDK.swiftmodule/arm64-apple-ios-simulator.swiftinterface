// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AxeptioSDK
import Foundation
import KeychainSwift
import Kingfisher
import SafariServices
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Axeptio) public class AxeptioObjCWrapper : NSObject {
  @objc public static var token: String {
    @objc get
    @objc set
  }
  @objc public static func initialize(clientId: String, version: String, completionHandler: @escaping (Error?) -> Void)
  @objc public static func hasUserConsent(forVendor name: String) -> Bool
  @objc public static func getUserConsent(forVendor name: String) -> Bool
  @objc public static func clearUserConsents()
  @objc public static func setUserConsentToDisagreeWithAll()
  @discardableResult
  @objc public static func showConsentController(initialStepIndex: Int = 0, onlyFirstTime: Bool = true, in viewController: UIViewController, animated: Bool = true, completionHandler: @escaping (Error?) -> Void) -> (() -> Void)?
  @objc deinit
}
extension URLSession {
  public typealias CancellationHandler = () -> Void
  public typealias ProcessingHandler<Result> = (Data, URLResponse) throws -> Result
  public typealias CompletionHandler<Result> = (Result?, Data?, Bool, Error?) -> Void
  @discardableResult
  public func dataTask<Result>(with request: URLRequest, processingHandler: @escaping ProcessingHandler<Result>, completionHandler: @escaping CompletionHandler<Result>) -> CancellationHandler
  @discardableResult
  public func jsonTask<Result>(with request: URLRequest, dateFormatter: DateFormatter? = nil, completionHandler: @escaping (Int?, Result?, Data?, Bool, Error?) -> Void) -> CancellationHandler where Result : Swift.Decodable
}
@_hasMissingDesignatedInitializers final public class Axeptio {
  public static let shared: AxeptioSDK.Axeptio
  public enum Error : Swift.Error {
    case notInitialized
    case alreadyInitialized
    case invalidClientId
    case unknownVersion
    case networkFailed
    case apiFailed
    public static func == (a: AxeptioSDK.Axeptio.Error, b: AxeptioSDK.Axeptio.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var token: String
  final public func initialize(clientId: String, version: String, completionHandler: @escaping (Error?) -> Void)
  final public func getUserConsent(forVendor name: String) -> Bool?
  final public func getVendors() -> [String]
  final public func clearUserConsents()
  final public func setUserConsentToDisagreeWithAll()
  @discardableResult
  final public func showConsentController(initialStepIndex: Int = 0, onlyFirstTime: Bool = true, in viewController: UIViewController, animated: Bool = true, completionHandler: @escaping (Error?) -> Void) -> (() -> Void)?
  @objc deinit
}
extension AxeptioSDK.Axeptio.Error : Swift.Equatable {}
extension AxeptioSDK.Axeptio.Error : Swift.Hashable {}
